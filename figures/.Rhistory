## this file is exported as .html, then screen shots i sused to make the .png file
## current version of Formattable doesn't support direct export to .png or .pdf, but alternative wrappers are in GitHub issues page
formattable(prettyTable, list(
Samples = color_tile("white", "#ff796c"),
SeqCounts = color_tile("white", "#bf9005"),
Top30p = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, TRUE, FALSE), ifelse(x, "Yes", "No"))),
Top50p = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, TRUE, FALSE), ifelse(x, "Yes", "No"))),
Top70p = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, TRUE, FALSE), ifelse(x, "Yes", "No")))
))
## export here; save as 'CoreFeautres'
setwd("~/Repos/mysosoup/figures/")
corefeat <- formattable(prettyTable, list(
Samples = color_tile("white", "#ff796c"),
SeqCounts = color_tile("white", "#bf9005"),
Top30p = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, TRUE, FALSE), ifelse(x, "Yes", "No"))),
Top50p = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, TRUE, FALSE), ifelse(x, "Yes", "No"))),
Top70p = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, TRUE, FALSE), ifelse(x, "Yes", "No")))
))
## function to export formattable object properly
export_formattable <- function(f, file, width = "75%", height = NULL,
background = "white", delay = 0.2)
{
w <- as.htmlwidget(f, width = width, height = height)
path <- html_print(w, background = background, viewer = NULL)
url <- paste0("file:///", gsub("\\\\", "/", normalizePath(path)))
webshot(url,
file = file,
selector = ".formattable_widget",
delay = delay)
}
export_formattable(corefeat,"CoreFeautres.png")
library(htmltools)
library(webshot)
export_formattable(corefeat,"CoreFeautres.png")
## function to export formattable object properly
export_formattable <- function(f, file, width = "95%", height = NULL,
background = "white", delay = 0.2)
{
w <- as.htmlwidget(f, width = width, height = height)
path <- html_print(w, background = background, viewer = NULL)
url <- paste0("file:///", gsub("\\\\", "/", normalizePath(path)))
webshot(url,
file = file,
selector = ".formattable_widget",
delay = delay)
}
export_formattable(corefeat,"CoreFeautres.png")
library(tidyverse)
library(vegan)
library(scales)
library(qiime2R)
library(reshape2)
library(formattable)
## function for plot theme:
theme_devon <- function () {
theme_bw(base_size=12, base_family="Avenir") %+replace%
theme(
panel.background  = element_blank(),
plot.background = element_rect(fill="transparent", colour=NA),
legend.background = element_rect(fill="transparent", colour=NA),
legend.key = element_rect(fill="transparent", colour=NA)
)
}
## function for plot theme:
theme_devon <- function () {
theme_bw(base_size=12, base_family="Avenir") %+replace%
theme(
panel.background  = element_blank(),
plot.background = element_rect(fill="transparent", colour=NA),
legend.background = element_rect(fill="transparent", colour=NA),
legend.key = element_rect(fill="transparent", colour=NA)
)
}
## import metadata
meta <- read_csv(file = "https://github.com/devonorourke/mysosoup/raw/master/data/metadata/mangan_metadata.csv", col_names = TRUE)
meta <- meta %>% select(SampleID, Roost, CollectionMonth, Site, SampleType, BatchType)
meta$Site <- ifelse(meta$Site == "Egner", gsub("Egner", "EN", meta$Site), meta$Site)
meta$Site <- ifelse(meta$Site == "HickoryBottoms", gsub("HickoryBottoms", "HB", meta$Site), meta$Site)
meta$CollectionMonth[is.na(meta$CollectionMonth)] <- "control"
meta$CollectionMonth <- ifelse(meta$CollectionMonth == "6", gsub("6", "June", meta$CollectionMonth), meta$CollectionMonth)
meta$CollectionMonth <- ifelse(meta$CollectionMonth == "7", gsub("7", "July", meta$CollectionMonth), meta$CollectionMonth)
meta$CollectionMonth <- ifelse(meta$CollectionMonth == "9", gsub("9", "September", meta$CollectionMonth), meta$CollectionMonth)
meta$Labeler <- paste(meta$Site, meta$Roost, sep="-")
meta$Labeler <- ifelse(meta$Labeler == "control-control", gsub("control-control", "control", meta$Labeler), meta$Labeler)
meta$CollectionMonth <- as.factor(meta$CollectionMonth)
## add taxonomy information
taxa <- read_delim(file = "https://github.com/devonorourke/mysosoup/raw/master/data/taxonomy/mangan_tax_p97c94.tsv", delim = "\t", col_names = TRUE)
taxa <- taxa %>% separate(., col = Taxon, sep=';', into = c("kingdom_name", "phylum_name", "class_name", "order_name", "family_name", "genus_name", "species_name")) %>% select(-Confidence)
taxa <- as.data.frame(apply(taxa, 2, function(y) gsub(".__", "", y)))
taxa <- as.data.frame(apply(taxa, 2, function(y) gsub("^$|^ $", NA, y)))
taxa <- as.data.frame(apply(taxa, 2, function(y) gsub("Ambiguous_taxa", NA, y)))
taxa <- as.data.frame(apply(taxa, 2, function(y) gsub("Unassigned", NA, y)))
colnames(taxa)[1] <- "ASVid"
qzapath = "~/Repos/mysosoup/data/qiime_qza/asvTables/Mangan.wNTCasvs-filt.rarefied-table_noNegSamps.qza"
featuretable <- read_qza(qzapath)
mat.tmp <- featuretable$data
rm(featuretable)
df.tmp <- as.data.frame(mat.tmp)
rm(mat.tmp)
df.tmp$OTUid <- rownames(df.tmp)
rownames(df.tmp) <- NULL
tmp <- melt(df.tmp, id = "OTUid") %>% filter(value != 0)
rm(df.tmp)
colnames(tmp) <- c("ASVid", "SampleID", "Reads")
df.tmp <- merge(tmp, taxa)
rm(tmp)
df.tmp <- merge(df.tmp, meta)
onlyControlASVs <- setdiff(df.tmp %>% filter(SampleType=="control") %>% select(ASVid) %>% pull(), df.tmp %>% filter(SampleType=="sample") %>% select(ASVid) %>% pull())
df_filt.tmp <- df.tmp %>% filter(!ASVid %in% onlyControlASVs) %>% filter(phylum_name=="Arthropoda") %>% filter(!is.na(family_name)) %>% filter(SampleType == "sample")
rm(df.tmp)
mat.tmp <- dcast(data = df_filt.tmp, formula = SampleID ~ ASVid, value.var='Reads', fill = 0)
row.names(mat.tmp) <- mat.tmp$SampleID
mat.tmp$SampleID <- NULL
tmp.hill <- data.frame(renyi(mat.tmp, scales = c(0,1,2), hill=TRUE)) %>% mutate(SampleID = row.names(.))
colnames(tmp.hill)[1:3] <- c("q=0", "q=1", "q=2")
Alpha_df <- gather(tmp.hill, key="Hill_qType", value = "Hill_value", c('q=0', 'q=1', 'q=2'))
mangan_hill_df <- merge(Alpha_df, meta)
rm(tmp.hill, mat.tmp, Alpha_df)
## plot parameter setup
mangan_hill_df$CollectionMonth <- factor(mangan_hill_df$CollectionMonth, levels = c("June", "July", "September"))
v3pal <- viridis::plasma(3, begin = 0.35, end = 0.9, direction = -1)
## plot alpha diversity collectively
## save as all_Alpha_Hillvals; export at 900x697
ggplot(mangan_hill_df, aes(x=Site, y=Hill_value, color=CollectionMonth)) +
geom_boxplot(outlier.shape = NA, color="gray30") +
geom_jitter(width = 0.2, alpha=0.6) +
scale_color_manual(values = c(v3pal, "gray40"), labels=c("June", "July", "September")) +
facet_grid(Hill_qType ~ CollectionMonth) +
labs(x="", y="Estimated diversity", color = "Month") +
theme_devon() + theme(legend.position = "none")
View(mangan_hill_df)
mangan_hill_df$Label2 <- paste(mangan_hill_df$Site, mangan_hill_df$CollectionMonth, sep="-")
## save as all_Alpha_Hillvals; export at 900x697
ggplot(mangan_hill_df, aes(x=Label2, y=Hill_value, color=CollectionMonth)) +
geom_boxplot(outlier.shape = NA, color="gray30") +
geom_jitter(width = 0.2, alpha=0.6) +
scale_color_manual(values = c(v3pal, "gray40"), labels=c("June", "July", "September")) +
facet_grid(Hill_qType ~ ) +
labs(x="", y="Estimated diversity", color = "Month") +
theme_devon() + theme(legend.position = "none")
## save as all_Alpha_Hillvals; export at 900x697
ggplot(mangan_hill_df, aes(x=Label2, y=Hill_value, color=CollectionMonth)) +
geom_boxplot(outlier.shape = NA, color="gray30") +
geom_jitter(width = 0.2, alpha=0.6) +
scale_color_manual(values = c(v3pal, "gray40"), labels=c("June", "July", "September")) +
facet_grid(~ Hill_qType ) +
labs(x="", y="Estimated diversity", color = "Month") +
theme_devon() + theme(legend.position = "none")
## save as all_Alpha_Hillvals; export at 900x697
ggplot(mangan_hill_df, aes(x=Label2, y=Hill_value, color=CollectionMonth)) +
geom_boxplot(outlier.shape = NA, color="gray30") +
geom_jitter(width = 0.2, alpha=0.6) +
scale_color_manual(values = c(v3pal, "gray40"), labels=c("June", "July", "September")) +
facet_grid(. ~ Hill_qType ) +
labs(x="", y="Estimated diversity", color = "Month") +
theme_devon() + theme(legend.position = "none")
## save as all_Alpha_Hillvals; export at 900x697
ggplot(mangan_hill_df, aes(x=Label2, y=Hill_value, color=CollectionMonth)) +
geom_boxplot(outlier.shape = NA, color="gray30") +
geom_jitter(width = 0.2, alpha=0.6) +
scale_color_manual(values = c(v3pal, "gray40"), labels=c("June", "July", "September")) +
facet_grid(Hill_qType ~ .) +
labs(x="", y="Estimated diversity", color = "Month") +
theme_devon() + theme(legend.position = "none")
p <- ggboxplot(mangan_hill_df, x = "Label2", y = "Hill_value",
color = "CollectionMonth", palette = "jco",
add = "jitter")
library(ggpubr)
p <- ggboxplot(mangan_hill_df, x = "Label2", y = "Hill_value",
color = "CollectionMonth", palette = "jco",
add = "jitter")
p
compare_means(Label2 ~ Hill_value,  data = mangan_hill_df)
compare_means(Hill_value ~ Label2,  data = mangan_hill_df)
p <- ggboxplot(mangan_hill_df, x = "Label2", y = "Hill_value",
color = "CollectionMonth", palette = "jco",
add = "jitter") +
compare_means(Hill_value ~ Label2,  data = mangan_hill_df)
## which vals are significant?
compare_means(Hill_value ~ Label2,  data = mangan_hill_df % filter(Hill_qType=="q=0"))
## split into 3 separate plots; one for each Hill Number
hill0 <- mangan_hill_df %>% filter(Hill_qType=="q=0")
hill1 <- mangan_hill_df %>% filter(Hill_qType=="q=1")
hill2 <- mangan_hill_df %>% filter(Hill_qType=="q=2")
## ggpubr to create individual figures then stitch together after
p0 <- ggboxplot(hill0, x = "Label2", y = "Hill_value",
color = "CollectionMonth", palette = "jco",
add = "jitter")
p0
v3pal <- viridis::plasma(3, begin = 0.35, end = 0.9, direction = -1)
vpal3
v3pal
## ggpubr to create individual figures then stitch together after
p0 <- ggboxplot(hill0, x = "Label2", y = "Hill_value",
color = "CollectionMonth", palette = v3pal,
add = "jitter")
p0
p0 + theme(axis.text.x = element_text(angle=22.5, hjust=1)
)
p0 +
theme(axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
labs(x= "Hill value", color="Month")
p0 +
theme(axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
labs(x= "Hill value", color="")
p0 +
theme(axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
labs(x= "Hill value")
p0 +
theme(axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
labs(x= "Estimated diversity") +
theme_devon()
p0 +
theme(axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
labs(x= "Estimated diversity") +
theme_devon() +
theme(legend.position="none")
p0 +
labs(y= "Estimated diversity") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank())
## which vals are significant?
compare_means(Hill_value ~ Label2,  data = hill0)
## which vals are significant?
compare_means(Hill_value ~ Label2,  data = hill0) %>% arrange(-p.format)
## which vals are significant?
compare_means(Hill_value ~ Label2,  data = hill0) %>% arrange(-`p.format`)
## which vals are significant?
compare_means(Hill_value ~ Label2,  data = hill0) %>% colnames(.)
## which vals are significant?
compare_means(Hill_value ~ Label2,  data = hill0) %>% arrange(p.format)
c("EN-June","HB-September"))
my_comparisons <- list( c("EN-June","EN-September", c("EN-July","HB-September"), c("HB-June","HB-September"),
c("EN-July","EN-September"), c("HB-July","HB-September"), c("HB-June", "EN-September"),
c("EN-June","HB-September")))
q0_comparisons <- list( c("EN-June","EN-September", c("EN-July","HB-September"), c("HB-June","HB-September"),
c("EN-July","EN-September"), c("HB-July","HB-September"), c("HB-June", "EN-September"),
c("EN-June","HB-September")))
## full plot
p0 +
labs(y= "Estimated diversity") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank())
## full plot
p0 +
labs(y= "Estimated diversity") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
stat_compare_means(comparisons = q0_comparisons)+ # Add pairwise comparisons p-value
stat_compare_means(label.y = 50)     # Add global p-value
q0_comparisons <- list( c("EN-June","EN-September"),
c("EN-July","HB-September"),
c("HB-June","HB-September"),
c("EN-July","EN-September"),
c("HB-July","HB-September"),
c("HB-June", "EN-September"),
c("EN-June","HB-September"))
## full plot
p0 +
labs(y= "Estimated diversity") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
stat_compare_means(comparisons = q0_comparisons)+ # Add pairwise comparisons p-value
stat_compare_means(label.y = 50)     # Add global p-value
## full plot
p0 +
labs(y= "Estimated diversity") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
stat_compare_means(comparisons = q0_comparisons)+ # Add pairwise comparisons p-value
stat_compare_means(label.y = 250)     # Add global p-value
## full plot
a <- p0 +
labs(y= "Estimated diversity") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
stat_compare_means(comparisons = q0_comparisons)+ # Add pairwise comparisons p-value
stat_compare_means(label.y = 250)     # Add global p-value
p1 <- ggboxplot(hill1, x = "Label2", y = "Hill_value",
color = "CollectionMonth", palette = v3pal,
add = "jitter")
hill0$Label2 <- factor(hill0$Label2, levels = c(
"EN-June", "HB-June", "EN-July", "HB-July", "EN-September", "HB-September"))
## ggpubr to create individual figures then stitch together after
p0 <- ggboxplot(hill0, x = "Label2", y = "Hill_value",
color = "CollectionMonth", palette = v3pal,
add = "jitter")
p0 +
labs(y= "Estimated diversity") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
stat_compare_means(comparisons = q0_comparisons)+ # Add pairwise comparisons p-value
stat_compare_means(label.y = 250)     # Add global p-value
## full plot
a <- p0 +
labs(y= "Estimated diversity") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
stat_compare_means(comparisons = q0_comparisons)+ # Add pairwise comparisons p-value
stat_compare_means(label.y = 250)     # Add global p-value
hill1$Label2 <- factor(hill1$Label2, levels = c(
"EN-June", "HB-June", "EN-July", "HB-July", "EN-September", "HB-September"))
hill2$Label2 <- factor(hill2$Label2, levels = c(
"EN-June", "HB-June", "EN-July", "HB-July", "EN-September", "HB-September"))
ggboxplot(hill1, x = "Label2", y = "Hill_value",
color = "CollectionMonth", palette = v3pal,
add = "jitter")
p1 <- ggboxplot(hill1, x = "Label2", y = "Hill_value",
color = "CollectionMonth", palette = v3pal,
add = "jitter")
compare_means(Hill_value ~ Label2,  data = hill1) %>% arrange(p.format)
q1_comparisons <- list( c("HB-July","EN-September"),
c("HB-July","HB-September"),
c("EN-June","HB-July"))
p1 +
labs(y= "Estimated diversity") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
stat_compare_means(comparisons = q1_comparisons)
p1 +
labs(y= "Estimated diversity") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
stat_compare_means(comparisons = q1_comparisons) +
stat_compare_means(label.y = 70)
b <- p1 +
labs(y= "Estimated diversity") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
stat_compare_means(comparisons = q1_comparisons) +
stat_compare_means(label.y = 70)
p2 <- ggboxplot(hill2, x = "Label2", y = "Hill_value",
color = "CollectionMonth", palette = v3pal,
add = "jitter")
p2
compare_means(Hill_value ~ Label2,  data = hill2) %>% arrange(p.format)
q2_comparisons <- list( c("HB-July","EN-September"),
c("HB-July","HB-September"),
c("EN-June","HB-July"))
p2 +
labs(y= "Estimated diversity") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
stat_compare_means(comparisons = q2_comparisons)
p2 +
labs(y= "Estimated diversity") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
stat_compare_means(comparisons = q2_comparisons) +
stat_compare_means(label.y = 75)
p2 +
labs(y= "Estimated diversity") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
stat_compare_means(comparisons = q2_comparisons) +
stat_compare_means(label.y = 35)
p2 +
labs(y= "Estimated diversity") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
stat_compare_means(comparisons = q2_comparisons) +
stat_compare_means(label.y = 40)
c <- p2 +
labs(y= "Estimated diversity") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust=1),
axis.title.x = element_blank()) +
stat_compare_means(comparisons = q2_comparisons) +
stat_compare_means(label.y = 40)
ggarrange(a,b,c,
nrow = 1,
labels=c("Hill number 0 (Observed richness)",
"Hill number 1 (Shannon's entropy)",
"Hill number 2 (Simpson's index)"))
ggarrange(a,b,c,
nrow = 1, ncol=3,
labels=c("Hill number 0 (Observed richness)",
"Hill number 1 (Shannon's entropy)",
"Hill number 2 (Simpson's index)"))
ggarrange(a,b,c,
nrow = 3, ncol=1,
labels=c("Hill number 0 (Observed richness)",
"Hill number 1 (Shannon's entropy)",
"Hill number 2 (Simpson's index)"))
ggarrange(a,b,c,
nrow = 3, ncol=1,
labels=c("Hill number 0 (Observed richness) \n",
"Hill number 1 (Shannon's entropy) \n",
"Hill number 2 (Simpson's index) \n"))
ggarrange(a,b,c,
nrow = 3, ncol=1,
label.x = 1,
labels=c("Hill number 0 (Observed richness) \n",
"Hill number 1 (Shannon's entropy) \n",
"Hill number 2 (Simpson's index) \n"))
ggarrange(a,b,c,
nrow = 3, ncol=1,
label.x = .9,
labels=c("Hill number 0 (Observed richness) \n",
"Hill number 1 (Shannon's entropy) \n",
"Hill number 2 (Simpson's index) \n"))
ggarrange(a,b,c,
nrow = 3, ncol=1,
label.x = .9,
labels=c("A", "B", "C")
labels=c("Hill number 0 (Observed richness) \n",
"Hill number 1 (Shannon's entropy) \n",
"Hill number 2 (Simpson's index) \n"))
ggarrange(a,b,c,
nrow = 3, ncol=1,
label.x = .9,
labels=c("A", "B", "C"))
ggarrange(a,b,c,
nrow = 3, ncol=1,
label.x = .9,
#labels=c("A", "B", "C"))
labels=c("Hill number 0",
"Hill number 1",
"Hill number 2"))
ggarrange(a,b,c,
nrow = 3, ncol=1,
label.x = .5,
#labels=c("A", "B", "C"))
labels=c("Hill number 0",
"Hill number 1",
"Hill number 2"))
ggarrange(a,b,c,
nrow = 3, ncol=1,
label.x = .3,
labels=c("A", "B", "C"))
ggarrange(a,b,c,
nrow = 3, ncol=1,
label.x = .2,
labels=c("A", "B", "C"))
ggarrange(a,b,c,
nrow = 3, ncol=1,
label.x = .2,
labels=c("Hill number 0 (Observed richness) \n",
"Hill number 1 (Shannon's entropy) \n",
"Hill number 2 (Simpson's index) \n"))
ggarrange(a,b,c,
nrow = 3, ncol=1,
label.x = .1,
labels=c("Hill number 0 (Observed richness) \n",
"Hill number 1 (Shannon's entropy) \n",
"Hill number 2 (Simpson's index) \n"))
ggarrange(a,b,c,
nrow = 3, ncol=1,
label.x = 0,
labels=c("Hill number 0 (Observed richness) \n",
"Hill number 1 (Shannon's entropy) \n",
"Hill number 2 (Simpson's index) \n"))
ggarrange(a,b,c,
nrow = 3, ncol=1,
label.x = 0,
label.y = 0,
labels=c("Hill number 0 (Observed richness) \n",
"Hill number 1 (Shannon's entropy) \n",
"Hill number 2 (Simpson's index) \n"))
ggarrange(a,b,c,
nrow = 3, ncol=1,
#label.x = 0,
#label.y = 0,
labels=c("A", "B", "C"))
